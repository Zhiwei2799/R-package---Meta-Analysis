---
title: "Untitled"
author: "Zhiwei Lin"
date: "2023-03-12"
output: html_document
---

```{r}
set.seed(123)
p <- 100
data1 <- data.frame(group = sample(1:3, 200, replace = TRUE),
    matrix(rnorm(p * 200), ncol = p))
data2 <- data.frame(group = sample(1:2, 150, replace = TRUE),
    matrix(rnorm(p * 150), ncol = )
data3 <- data.frame(group = sample(1:4, 300, replace = TRUE),
    matrix(sample(0:2, size = 300 * p, replace = TRUE),
        ncol = p))
colnames(data1) <- c("group", paste("gene", 1:p, sep = ""))
colnames(data2) = colnames(data3) <- colnames(data1)
datalist <- list(Data1 = data1, Data2 = data2, Data3 = data3)
```
```{r}
length(sapply(datalist, ncol))
sapply(datalist, ncol)[2]
```


```{r}
determine_tests <- function(df) {
  # Determine number of groups
  n_groups <- length(unique(df$group))
  # Initialize vector to hold tests
  pv1 <- c()
  tests <- c()
  if (is.numeric(df[,2])){
  if (n_groups > 2) {
    for (i in 1:ncol(df)){
      sp<-c()
      fp<-c()
      for (j in 1:n_groups){
        sp[j] <- shapiro.test(df[df$group==j,i+1])$p.value
        if (j > 1 ){
          fp[j-1] <-var.test(df[df$group==(j-1),i+1],df[df$group==j,i+1])$p.value
        }
        if(all(sp > 0.05) & all(fp > 0.05)){
          pv1[i]<-anova(lm(df[,i+1]~group, data=df))$p.value
          tests[i] <- "anova"
        } else {kruskal.test(df[,i+1]~group,data=df)
          tests[i] <- "kruskal"
        }
      }
    }
  }else { 
    for (i in 1:ncol(df)){
      sp<-c()
      fp<-c()
      for (j in 1:n_groups){
        sp[j] <- shapiro.test(df[df$group==j,i+1])$p.value
        if (j > 1 ){
          fp[j-1] <-var.test(df[df$group==(j-1),i+1],df[df$group==j,i+1])$p.value
        }
        if(all(sp > 0.05) & all(fp > 0.05)){
          pv1[i] <- t.test(df[df$group==0,i+1],df[df$group==1,i+1],var.equal=TRUE)$p.value
          tests[i] <- "TtestEV"
        } else if(all(sp>0.05) & all(fp<=0.05)){
pv1[i] <- t.test(df[df$group==0,i+1],df[df$group==1,i+1],var.equal=FALSE)$p.value
          tests[i] <- 'TtestUEV'
        } else{ pv1[i] <- wilcox.test(mydat[mydat$Race==0,i+2],mydat[mydat$Race==1,i+2])$p.value
tests[i] <- 'Wilcox'
}
      }
    }
  }
}
}
        
      

```

```{r}
determine_tests <- function(df) {
  # Determine number of groups
  n_groups <- length(unique(df$group))
  # Initialize vector to hold tests
  tests <- c()
  if (n_groups > 2) {
    for (i in seq_along(df)) {
      if (is.numeric(df[[i]]) && !identical(df[[i]], df$group)) {
        sp <- c()
        fp <- c()
        for (j in 1:n_groups) {
          sp[j] <- shapiro.test(df[df$group == j, i])$p.value
          if (j > 1) {
            fp[j-1] <- var.test(df[df$group == (j-1), i], df[df$group == j, i])$p.value
          }
        }
        if (all(sp > 0.05) & all(fp > 0.05)) {
          pv1 <- anova(lm(df[[i]] ~ group, data = df))$p.value
          tests[i] <- "anova"
        } else {
          pv1 <- kruskal.test(df[[i]] ~ group, data = df)$p.value
          tests[i] <- "kruskal"
        }
      }
    }
  } else {
    for (i in seq_along(df)) {
      if (is.numeric(df[[i]]) && !identical(df[[i]], df$group)) {
        sp <- c()
        fp <- c()
        for (j in 1:n_groups) {
          sp[j] <- shapiro.test(df[df$group == j, i])$p.value
          if (j > 1) {
            fp[j-1] <- var.test(df[df$group == (j-1), i], df[df$group == j, i])$p.value
          }
        }
        if (all(sp > 0.05) & all(fp > 0.05)) {
          pv1 <- t.test(df[df$group == 1, i], df[df$group == 2, i], var.equal = TRUE)$p.value
          tests[i] <- "TtestEV"
        } else if (all(sp > 0.05) & all(fp <= 0.05)) {
          pv1 <- t.test(df[df$group == 1, i], df[df$group == 2, i], var.equal = FALSE)$p.value
          tests[i] <- "TtestUEV"
        } else {
          pv1 <- wilcox.test(df[df$group == 1, i], df[df$group == 2, i])$p.value
          tests[i] <- "Wilcox"
        }
      }
    }
  }
  return(list(p_values = pv1, tests = tests))
}

```

```{r}
determine_tests <- function(df) {
  n_groups <- length(unique(df$group))
  pv1 <- rep(NA, ncol(df)) # Initialize vector with NAs
  tests <- rep("", ncol(df)) # Initialize vector with empty strings
  if (is.numeric(df[,2])) {
    if (n_groups > 2) {
      for (i in 1:ncol(df)) {
        sp<-c()
        fp<-c()
        for (j in 1:n_groups) {
          sp[j] <- shapiro.test(df[df$group==j,i+1])$p.value
          if (j > 1 ) {
            fp[j-1] <-var.test(df[df$group==(j-1),i+1],df[df$group==j,i+1])$p.value
          }
          if(all(sp > 0.05) & all(fp > 0.05)) {
            test <- anova(df[,i+1]~group, data=df)$p.value
            pv1[i] <- summary(test)[[1]][["Pr(>F)"]][[1]]
            tests[i] <- "anova"
          } else {
            pv1[i] <- kruskal.test(df[,i+1]~group,data=df)$p.value
            tests[i] <- "kruskal"
          }
        }
      }
    } else { 
      for (i in 1:ncol(df)) {
        sp<-c()
        fp<-c()
        for (j in 1:n_groups) {
          sp[j] <- shapiro.test(df[df$group==j,i+1])$p.value
          if (j > 1 ) {
            fp[j-1] <-var.test(df[df$group==(j-1),i+1],df[df$group==j,i+1])$p.value
          }
          if(all(sp > 0.05) & all(fp > 0.05)) {
            pv1[i] <- t.test(df[df$group==0,i+1],df[df$group==1,i+1],var.equal=TRUE)$p.value
            tests[i] <- "TtestEV"
          } else if(all(sp>0.05) & all(fp<=0.05)) {
            pv1[i] <- t.test(df[df$group==0,i+1],df[df$group==1,i+1],var.equal=FALSE)$p.value
            tests[i] <- 'TtestUEV'
          } else {
            pv1[i] <- wilcox.test(df[df$group==0,i+1],df[df$group==1,i+1])$p.value
            tests[i] <- 'Wilcox'
          }
        }
      }
    }
  } else {
    if (all(table(df$group) >= 20)){
      for (i in 1:ncol(df)) {
        chisq <- chisq.test(df[,i+1], df$group)
        if (chisq$p.value < 0.05) {
          tests[i] <- "chisq"
          pv1[i] <- chisq$p.value
        } else {
          tests[i] <- "Fisher"
          fisher <- fisher.test(df[,i+1], df$group)
          pv1[i] <- fisher$p.value
        }
      }
    } 
  }
  return(list(pvalue = pv1, test= tests))
}
```

```{r}
determine_tests <- function(df) {
  n_groups <- length(unique(df$group))
  pv1 <- c(0,c())
  tests <- c()
  if (is.numeric(df[,2])) {
    if (n_groups > 2) {
      for (i in 2:ncol(df)) { 
        sp <- c()
        fp <- c()
        for (j in 1:n_groups) {
          sp[j] <- shapiro.test(df[df$group==j,i])$p.value
          if (j > 1) {
            fp[j-1] <- var.test(df[df$group==(j-1),i], df[df$group==j,i])$p.value 
          }
          if(all(sp > 0.05) & all(fp > 0.05)) {
            test <- aov(df[,i]~group, data=df)
            pv1[i] <- summary(test)[[1]][["Pr(>F)"]][[1]]
            tests[i-1] <- "anova"  
          } else {
            pv1[i-1] <- kruskal.test(df[,i]~group,data=df)$p.value  
            tests[i-1] <- "kruskal"  
          }
        }
      }
    } else { 
      for (i in 2:ncol(df)) { 
      sp1 <- shapiro.test(df[df$group==0,i])$p.value
      sp2 <- shapiro.test(df[df$group==1,i])$p.value
      fp <- var.test(df[df$group==0,i],df[df$group==1,i])$p.value
        if(sp1>0.05&sp2>0.05&fp>0.05){
          pv1[i] <- t.test(df[df$group==0,i],df[df$group==1,i],var.equal=TRUE)$p.value
          tests[i] <- 'TtestEV'
}else if(sp1>0.05&sp2>0.05&fp<=0.05){
pv1[i] <- t.test(df[df$group==0,i],df[df$group==1,i],var.equal=FALSE)$p.value
          tests[i] <- 'TtestUEV'
}else{
pv1[i] <- wilcox.test(df[df$group==0,i],df[df$group==1,i+2])$p.value
          tests[i] <- 'Wilcox'
}
}
          }
        }
      }
    }
  } else {
    if (all(table(df$group) >= 20)){
      for (i in 2:ncol(df)) {
        chisq <- chisq.test(df[,i], df$group)
        if (chisq$p.value < 0.05) {
          tests[i-1] <- "chisq"
          pv1[i-1] <- chisq$p.value
        } else {
          tests[i-1] <- "Fisher"
          fisher <- fisher.test(df[,i], df$group)
          pv1[i-1] <- fisher$p.value
        }
      }
    } 
  }
  return(list(pvalue = pv1, test= tests))
}

```


```{r}
determine_tests <- function(df) {
  n_groups <- length(unique(df$group))
  pv1 <- c(0,c())
  tests <- c()
  if (is.numeric(df[,2])) {
    if (n_groups > 2) {
      for (i in 2:ncol(df)) { 
        sp <- c()
        fp <- c()
        for (j in 1:n_groups) {
          sp[j] <- shapiro.test(df[df$group==j,i])$p.value
          if (j > 1) {
            fp[j-1] <- var.test(df[df$group==(j-1),i], df[df$group==j,i])$p.value 
          }
        }
        if(all(sp > 0.05) & all(fp > 0.05)) {
          test <- aov(df[,i]~group, data=df)
          pv1[i] <- summary(test)[[1]][["Pr(>F)"]][[1]]
          tests[i-1] <- "anova"  
        } else {
          pv1[i] <- kruskal.test(df[,i]~group,data=df)$p.value  
          tests[i-1] <- "kruskal"  
        }
      }
    } else { 
      for (i in 2:ncol(df)) { 
        sp1 <- shapiro.test(df[df$group==1,i])$p.value
        sp2 <- shapiro.test(df[df$group==2,i])$p.value
        fp <- var.test(df[df$group==1,i],df[df$group==2,i])$p.value
        if(sp1>0.05&sp2>0.05&fp>0.05){
          pv1[i] <- t.test(df[df$group==1,i],df[df$group==2,i],var.equal=TRUE)$p.value
          tests[i-1] <- 'TtestEV'
        } else if(sp1>0.05&sp2>0.05&fp<=0.05){
          pv1[i] <- t.test(df[df$group==1,i],df[df$group==2,i],var.equal=FALSE)$p.value
          tests[i-1] <- 'TtestUEV'
        } else {
          pv1[i] <- wilcox.test(df[df$group==1,i],df[df$group==2,i+2])$p.value
          tests[i-1] <- 'Wilcox'
        }
      }
    }
  } else {
    if (all(table(df$group) >= 20)){
      for (i in 2:ncol(df)) {
        chisq <- chisq.test(df[,i], df$group)
        if (chisq$p.value < 0.05) {
          tests[i-1] <- "chisq"
          pv1[i-1] <- chisq$p.value
        } else {
          tests[i-1] <- "Fisher"
          fisher <- fisher.test(df[,i], df$group, simulate.p.value=TRUE)
          pv1[i-1] <- fisher$p.value
        }
      }
    } 
  }
  return(list(pvalue = pv1, test= tests))
}

```

```{r}
test_list <- lapply(datalist, determine_tests)
pvalues <-c()
for (i in 1:length(test_list)){
  p.val <- test_list[[i]][[1]]
  pvalues[[i]] <- p.val
}
pmat <- do.call(cbind, pvalues)
```

```{r}
fisher_method <- function(p_values) {
  -2 * sum(log(p_values))
}
fisher_stat <- apply(pmat,2,fisher_method)
df <- 2 * nrow(pmat)
p_value <- 1 - pchisq(fisher_stat, df)
cat("Fisher combined p-values:", p_value)
```

```{r}
stouffers_method <- function(p_values) {
  z_scores <- qnorm(1 - p_values/2)
  weights <- sqrt(length(p_values))
  z_sum <- sum(z_scores)/weights
  p_value <- pnorm(z_sum)
  return(list(test_statistic = z_sum, p_value = p_value))
}

stouffers_result <- apply(pmat, 2, stouffers_method)

cat("Stouffer's combined test statistic:", stouffers_result[[1]]$test_statistic, "\n")
cat("Stouffer's combined p-value:", stouffers_result[[1]]$p_value)


```




```{r}
library(stats)
library(methods)

ppool <- function(pmat,method='SD'){
  nmet <- ncol(pmat)
  pmat[pmat<1e-5] <- 1e-5
  pmat[pmat>1-1e-5] <- 1-1e-5
  if(method=='SD'){
    tf <- apply(pmat,1,max)
    cs <- qnorm(1-pmat)
    ccs <- cs[-which(tf<quantile(tf,.2)),]
    crs <- cor(ccs)
    er <- sum(crs[upper.tri(crs)])
    stat <- rowSums(cs)/sqrt(nmet+2*er)
    pv <- 1-pnorm(stat)
  }else if(method=='FD'){
    tf <- apply(pmat,1,max)
    cf <- -2*log(pmat)
    ccf <- cf[-which(tf<quantile(tf,.2)),]
    cr <- cor(ccf)
    cv <- 3.263*cr+.71*cr^2+.027*cr^3
    nmet2 <- 2*nmet
    cc <- (nmet2+sum(cv[upper.tri(cv)]))/nmet2
    ff <- nmet2^2/(nmet2+sum(cv[upper.tri(cv)]))
    stat <- rowSums(cf)/cc
    pv <- 1-pchisq(rowSums(cf)/cc,ff)
  }else if(method=='SI'){
    cs <- qnorm(1-pmat)
    stat <- rowSums(cs)/sqrt(nmet)
    pv <- 1-pnorm(stat)
  }else if(method=='FI'){
    stat <- -2*rowSums(log(pmat))
    pv <- 1-pchisq(stat,2*nmet)
  }else if(method=='MI'){
    stat <- apply(pmat,1,min)
    pv <- pbeta(stat,1,nmet)
  }else{
    stat <- apply(pmat,1,max)
    pv <- pbeta(stat,nmet,1)
  }
  pvadj <- p.adjust(pv,'BH')
  return(new('adjp',stat=stat,pvalue=pv,adjp=pvadj))
}
```




```{r}
install.packages("poolr")
install.packages('multtest')
library(poolr)
fisher(pmat[,1])

```












```{r}
# create a list to store p-values for each data
fisher_pvalues <- list()

# loop through each data in the datalist
for (i in 1:length(datalist)) {
  data_name <- names(datalist[i])
  pvalues <- unlist(datalist[i])
  
  # calculate Fisher's method p-value
  log_p <- log(pvalues)
  n <- length(pvalues)
  test_stat <- -2 * sum(log_p)
  p_value <- pchisq(test_stat, df = 2 * n, lower.tail = FALSE)
  
  # store the p-value in the fisher_pvalues list with the corresponding data name
  fisher_pvalues[[data_name]] <- p_value
}

# view the resulting list of Fisher's method p-values for each data
fisher_pvalues

```

```{r}

```








```{r}
df <- data.frame(group = sample(1:3, 200, replace = TRUE),
    matrix(rnorm(p * 200), ncol = p))
data2 <- data.frame(group = sample(1:2, 150, replace = TRUE),
    matrix(rnorm(p * 150), ncol = p))
data3 <- data.frame(group = sample(1:4, 300, replace = TRUE),
    matrix(sample(0:2, size = 300 * p, replace = TRUE),
        ncol = p))
data3[, -1] <- lapply(data3[, -1], factor)

determine_tests(data3)

data3<-factor(data3)
 test <- aov(df[,2]~group, data=df)
 summary(test)[[1]][["Pr(>F)"]][[1]]
```

```{r}
table(df$group) >= 20
```


```{r}
# Example matrix of p-values (3 tests with 4 comparisons each)
pmat <- matrix(c(0.05, 0.01, 0.02, 0.03, 0.10, 0.001, 0.05, 0.02, 0.001, 0.02, 0.03, 0.001), nrow = 3)

# Define Fisher method function
fisher_method <- function(p_values) {
  -2 * sum(log(p_values))
}

# Apply Fisher method to each column of p-values
fisher_stat <- apply(pmat, 2, fisher_method)

# Calculate the degrees of freedom
df <- 2 * nrow(pmat)

# Calculate the p-value using pchisq()
p_value <- 1 - pchisq(fisher_stat, df)

# Print the p-value
cat("Fisher combined p-value:", p_value)

```

```{r}
bioMetaLin::meta_analysis(datalist)
```

```{r}
data_validation <- function(datalist){
  if (!is.list(datalist) | !all(sapply(datalist, is.data.frame))) {
    stop("Input must be a list of data frames")
  }
  ncol_check <- sapply(datalist, ncol)
  if (length(unique(ncol_check)) > 1) {
    stop("Data frames must have the same number of columns")
  }
}

determine_tests <- function(df) {
  n_groups <- length(unique(df$group))
  pv1 <- c(0,c())
  tests <- c()
  if (is.numeric(df[,2])) {
    if (n_groups > 2) {
      for (i in 2:ncol(df)) {
        sp <- c()
        fp <- c()
        for (j in 1:n_groups) {
          sp[j] <- shapiro.test(df[df$group==j,i])$p.value
          if (j > 1) {
            fp[j-1] <- var.test(df[df$group==(j-1),i], df[df$group==j,i])$p.value
          }
        }
        if(all(sp > 0.05) & all(fp > 0.05)) {
          test <- aov(df[,i]~group, data=df)
          pv1[i] <- summary(test)[[1]][["Pr(>F)"]][[1]]
          tests[i-1] <- "anova"
        } else {
          pv1[i] <- kruskal.test(df[,i]~group,data=df)$p.value
          tests[i-1] <- "kruskal"
        }
      }
    } else {
      for (i in 2:ncol(df)) {
        sp1 <- shapiro.test(df[df$group==1,i])$p.value
        sp2 <- shapiro.test(df[df$group==2,i])$p.value
        fp <- var.test(df[df$group==1,i],df[df$group==2,i])$p.value
        if(sp1>0.05&sp2>0.05&fp>0.05){
          pv1[i] <- t.test(df[df$group==1,i],df[df$group==2,i],var.equal=TRUE)$p.value
          tests[i-1] <- 'TtestEV'
        } else if(sp1>0.05&sp2>0.05&fp<=0.05){
          pv1[i] <- t.test(df[df$group==1,i],df[df$group==2,i],var.equal=FALSE)$p.value
          tests[i-1] <- 'TtestUEV'
        } else {
          pv1[i] <- wilcox.test(df[df$group==1,i],df[df$group==2,i+2])$p.value
          tests[i-1] <- 'Wilcox'
        }
      }
    }
  } else {
    if (all(table(df$group) >= 20)){
      for (i in 2:ncol(df)) {
        chisq <- chisq.test(df[,i], df$group)
        if (chisq$p.value < 0.05) {
          tests[i-1] <- "chisq"
          pv1[i-1] <- chisq$p.value
        } else {
          tests[i-1] <- "Fisher"
          fisher <- fisher.test(df[,i], df$group, simulate.p.value=TRUE)
          pv1[i-1] <- fisher$p.value
        }
      }
    }
  }
  return(list(pvalue = pv1, test= tests))
}



pmat <- function(datalist){
  test_list<-lapply(datalist, determine_tests)
  pvalues <-c()
  for (i in 1:length(test_list)){
    p.val <- test_list[[i]][[1]]
    pvalues[[i]] <- p.val
  }
  pmat <- do.call(cbind, pvalues)
  return(pmat)
}


# fisher_method
fisher_method <- function(p_values) {
  -2 * sum(log(p_values))
}
fisher_stat <- apply(pmat,2,fisher_method)
df <- 2 * nrow(pmat)
p_value <- 1 - pchisq(fisher_stat, df)
cat("Fisher combined p-values:", p_value)

# stouffer_method
stouffers_method <- function(p_values) {
  z_scores <- qnorm(1 - p_values/2)
  weights <- sqrt(length(p_values))
  z_sum <- sum(z_scores)/weights
  p_value <- pnorm(z_sum)
  return(list(test_statistic = z_sum, p_value = p_value))
}

stouffers_result <- apply(pmat, 2, stouffers_method)

cat("Stouffer's combined test statistic:", stouffers_result[[1]]$test_statistic, "\n")
cat("Stouffer's combined p-value:", stouffers_result[[1]]$p_value)



```

